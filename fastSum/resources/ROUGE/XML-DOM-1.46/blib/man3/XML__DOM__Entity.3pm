.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::DOM::Entity 3pm"
.TH XML::DOM::Entity 3pm "2000-01-31" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::DOM::Entity \- An XML ENTITY in XML::DOM
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::DOM::Entity extends XML::DOM::Node.
.PP
This node represents an Entity declaration, e.g.
.PP
.Vb 1
\& <!ENTITY % draft \*(AqINCLUDE\*(Aq>
\&
\& <!ENTITY hatch\-pic SYSTEM "../grafix/OpenHatch.gif" NDATA gif>
.Ve
.PP
The first one is called a parameter entity and is referenced like this: \f(CW%draft\fR;
The 2nd is a (regular) entity and is referenced like this: &hatch\-pic;
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.IP "getNotationName" 4
.IX Item "getNotationName"
Returns the name of the notation for the entity.
.Sp
\&\fINot Implemented\fR The \s-1DOM\s0 Spec says: For unparsed entities, the name of the 
notation for the entity. For parsed entities, this is null.
(This implementation does not support unparsed entities.)
.IP "getSysId" 4
.IX Item "getSysId"
Returns the system id, or undef.
.IP "getPubId" 4
.IX Item "getPubId"
Returns the public id, or undef.
.SS "Additional methods not in the \s-1DOM\s0 Spec"
.IX Subsection "Additional methods not in the DOM Spec"
.IP "isParameterEntity" 4
.IX Item "isParameterEntity"
Whether it is a parameter entity (%ent;) or not (&ent;)
.IP "getValue" 4
.IX Item "getValue"
Returns the entity value.
.IP "getNdata" 4
.IX Item "getNdata"
Returns the \s-1NDATA\s0 declaration (for general unparsed entities), or undef.
