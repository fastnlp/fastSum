.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::Handler::BuildDOM 3pm"
.TH XML::Handler::BuildDOM 3pm "2000-02-11" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Handler::BuildDOM \- PerlSAX handler that creates XML::DOM document structures
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use XML::Handler::BuildDOM;
\& use XML::Parser::PerlSAX;
\&
\& my $handler = new XML::Handler::BuildDOM (KeepCDATA => 1);
\& my $parser = new XML::Parser::PerlSAX (Handler => $handler);
\&
\& my $doc = $parser\->parsefile ("file.xml");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::Handler::BuildDOM creates \s-1XML::DOM\s0 document structures 
(i.e. XML::DOM::Document) from PerlSAX events.
.PP
This class used to be called XML::PerlSAX::DOM prior to libxml-enno 1.0.1.
.SS "\s-1CONSTRUCTOR OPTIONS\s0"
.IX Subsection "CONSTRUCTOR OPTIONS"
The XML::Handler::BuildDOM constructor supports the following options:
.IP "\(bu" 4
KeepCDATA => 1
.Sp
If set to 0 (default), CDATASections will be converted to regular text.
.IP "\(bu" 4
Document => \f(CW$doc\fR
.Sp
If undefined, start_document will extract it from Element or DocType (if set),
otherwise it will create a new XML::DOM::Document.
.IP "\(bu" 4
Element => \f(CW$elem\fR
.Sp
If undefined, it is set to Document. This will be the insertion point (or parent)
for the nodes defined by the following callbacks.
.IP "\(bu" 4
DocType => \f(CW$doctype\fR
.Sp
If undefined, start_document will extract it from Document (if possible).
Otherwise it adds a new XML::DOM::DocumentType to the Document.
